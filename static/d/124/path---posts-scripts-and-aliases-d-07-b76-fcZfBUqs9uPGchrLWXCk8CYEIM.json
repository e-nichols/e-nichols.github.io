{"data":{"markdownRemark":{"html":"<p>I had written earlier about using <a href=\"https://gist.github.com/cobyism/4730490\">this tutorial</a> regarding subtree pushing in git to make updating my website easier. Well, that ended up breaking everything and causing some really nasty errors which took me a long time to sort out. I reverted back to my usual build and update process, which looks something like this:</p>\n<ul>\n<li>Write a new post.</li>\n<li>Build a new version of the site on my \"dev\" branch.</li>\n<li>Copy the contents of the \"public\" folder (containing the new version of my site) to my desktop in a tmp folder.</li>\n<li>Switch to my master branch, containing the live site code.</li>\n<li>Delete everything in the master branch and drop</li>\n</ul>\n<p>Very slow, and very tedious. The steps above seemed like a good candidate for automation via a bash script, so I decided to give it a go. The script is below:</p>\n<pre><code class=\"language-bash\">#!/bin/bash\n# Deploy Site Script\n\necho \"Deploy Website Script\"\ncd ~/_Dev/e-nichols.github.io\n`git checkout dev`\n\n# echo \"Building new site...\"\n`gatsby build`\n\necho \"Copying Contents of Public Folder...\"\ncp -a public/ ~/Desktop/tmp_build\n\necho \"Checking out master branch...\"\n`git checkout master`\n\necho \"Deleting Old Build...\"\nrm -r *\n\necho \"Copying over new site...\"\ncp -a ~/Desktop/tmp_build/* ~/_Dev/e-nichols.github.io/\n\ntimestamp=$(date)\n\necho \"Adding and committing changes...\"\n`git add . &#x26;&#x26; git commit -m \"Fresh build at $timestamp\"`\n\necho \"Pushing changes to github...\"\n`git push origin master`\n\necho \"Cleaning up...\"\nrm -rf ~/Desktop/tmp_build\n\necho \"Done\"\n</code></pre>\n<p>I tested it with a dummy git repo and it ran smoothly. To enable calling it from the terminal, I created a \"scripts\" folder in my ~/.oh-my-zsh directory and added it to my path. Boom! Automation is great.</p>\n<p>Additionally, I took the time to create some git command aliases in my .zshrc file:</p>\n<pre><code class=\"language-bash\"># GIT ALIASES\nalias gc=\"git clone\"\nalias co=\"git checkout\"\nalias gs=\"git status\"\nalias ga=\"git add\"\nalias gaa=\"git add .\"\nalias gcm=\"git commit -m\"\nalias gpo=\"git push origin\"\n</code></pre>\n<p>Simple timesavers. I added a couple aliases for jumping to certain directories, which provides the same functionality as <a href=\"https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/jump/jump.plugin.zsh\">zsh's jump plugin</a>.</p>\n<p><a href=\"https://dotfiles.github.io/\">Check out this site</a> if you're interested with learning more or getting started with dotfiles. A couple hours of research and work will pay dividends down the road.</p>","frontmatter":{"date":"2016-09-07T00:00:00.000Z","title":"Timesavers with Scripting and Aliases"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/scripts-and-aliases"}}