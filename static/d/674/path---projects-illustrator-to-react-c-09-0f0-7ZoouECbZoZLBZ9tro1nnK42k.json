{"data":{"markdownRemark":{"html":"<p>I've been working on a project the past few months for a team of doctors at the KU Medical Center -- Dr. Garth Fraga, Dr. Arlette-Habashi and Matt DaCunha, a third-year medical student. We're making RightSite, an iOS application aimed at reducing biopsy-labeling errors in the clinical setting.</p>\n<p>The app is comprised of about 30 different images of the human body, which users can click on to see the anatomically correct labeling.</p>\n<p><img src=\"demo.gif\"></p>\n<p>I use Adobe Illustrator to make the interactive overlays for the illustrations. I export the overlay as an SVG, which I then use to create a <a href=\"https://github.com/react-native-community/react-native-svg\">React Native SVG</a> component. Unfortunately, the conversion from SVG to React Component is quite tedious. Removing useless defs and styles, uppercasing all the different shapes, removing the underscores between the path IDs -- all the stuff that makes your wrist ache and eyes glaze over. So I invested an afternoon to automate the conversion. The result: 50 lines of Python I wish I had wrote at the beginning of this project.</p>\n<pre><code class=\"language-python\">import sys\nimport re\n\ndef caps(str):\n    str = str.replace(\"_1_\\\"\",\"\\\")}\")\n    str = str.replace(\"_2_\\\"\",\"\\\")}\")\n    str = str.replace(\"_3_\\\"\",\"\\\")}\")\n    str = str.replace(\"_\",\" \")\n    str = str.replace(\"fill-rule=\\\"evenodd\\\" clip-rule=\\\"evenodd\\\"\",\"\")\n    #XX used as marker for addProps function\n    str = str.replace(\"fill=\\\"#2895B2\\\"\", \"XX\")\n    str = str.replace(\"path\",\"Path\")\n    str = str.replace(\"ellipse\",\"Ellipse\")\n    str = str.replace(\"rect\", \"Rect\")\n    str = str.replace(\"polyline\",\"Polyline\")\n    str = str.replace(\"circle\",\"Circle\")\n    return str\n\ndef createTag(str):\n    matches=re.findall(r'\\\"(.+?)\\\"',str)\n    w = matches[2][:-2]\n    h = matches[3][:-2]\n    vb = matches[4]\n    return( \"&#x3C;Svg width=\\\"\" + w + \"\\\" \"+\"height=\\\"\" + h + \"\\\" \" + \"viewBox=\\\"\" + vb + \"\\\">\\n\" )\n\ndef addProps(str):\n    matches=re.findall(r'\\\"(.+?)\\\"',str);\n    id = matches[0]\n    str = str.replace(\"id=\",\"onPressIn={() => this._appendEvent(\")\n    injection = \"fill={consts.defaultFill} fillOpacity={this.state.selected == \\\"\"+ id + \"\\\" ? consts.selected : consts.visible}\"\n    str = str.replace(\"XX\",injection)\n    return str\n\ndef main():\n    output = open(sys.argv[2],\"w+\")\n    with open(sys.argv[1],\"r\") as input:\n        f = input.readlines()[7:-1]\n        #opening tag\n        output.write( createTag(f[0]) )\n        lineno = 0\n        for line in f:\n            if lineno > 3:\n                line = caps(line)\n                if line[0] == '&#x3C;':\n                    line = addProps(line)\n                    output.write(line)\n                else:\n                    output.write(line)\n            lineno += 1\n        #closing tag\n        output.write(\"&#x3C;/Svg>\")\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>\n<p>Looking at the program function by function:</p>\n<ul>\n<li><strong>caps(str)</strong>: remove Adobe Illustrator layer name suffixes and underscores (e.g. \"Some<em>Layer</em>1_\" become s\"Some Layer\"). Uppercase all SVG elements.</li>\n<li>\n<p><strong>createTag(str)</strong>: create the opening opening tag for the <a href=\"https://github.com/react-native-community/react-native-svg\">react-native-svg</a> component. The raw SVG export from Adobe contains a line like this:</p>\n<pre><code>\"x=\"0px\" y=\"0px\" width=\"180px\" height=\"626px\" viewBox=\"-0.5 -0.3 180 626\"\n</code></pre>\n<p>We care about the quoted values, which are used within the tag. <a href=\"https://docs.python.org/2/library/re.html\">Python's regular expressions</a> are very handy for this.</p>\n</li>\n<li>\n<p><strong>addProps(str)</strong>: Create the onPress function and \"inject\" style values into the individual SVG elements. This allows user to interact with the individual components of the SVGs. Another example line:</p>\n<pre><code>&#x3C;path id=\"Fifth_right_distal_plantar_toe_1_\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" fill=\"#2895B2\" d=\"...\"/>\n</code></pre>\n<p>First, we convert the id variable into the OnPressIn function using a simple replace call. Next, create the \"injection\" string containing the style values, and insert this into the tag using the \"XX\" string that was inserted in the caps() function earlier.</p>\n</li>\n<li>\n<p><strong>main()</strong>: open the input SVG and write to the output SVG using the functions above. To run this script from the CLI:</p>\n<pre><code>python clean.py &#x3C;INPUT_SVG> &#x3C;OUTPUT_SVG>\n</code></pre>\n<p>The &#x3C;INPUT<em>SVG> will be parsed, and the finished file will be written to &#x3C;OUTPUT</em>SVG> in the same directory. If it does not already exist, the &#x3C;OUTPUT_SVG> file will be created automatically (no need to make an empty SVG file to pass in).</p>\n</li>\n</ul>\n<p>Main tosses out the top 8 lines of the input SVG. It is useless within the react-native-svg component. After creating the opening tag, the remainder of the file is processed. The addProps() function is called if an \"&#x3C;\" opening tag is encountered; all other lines are written to the output without change.</p>\n<p>Performing the SVG conversions by hand isn't a <em>broken</em> process, but it is woefully <em>inefficient</em>. And inefficient processes are bad. But I always grapple.</p>\n<p><em>\"Is it worth it to take a day and address this inefficiency? I have a lot of other shit to do.\"</em></p>\n<p>Let this script serve to show: it most definitely IS worth it. Eliminate repetitive tasks by keeping a keen eye for automation opportunities in your workflows.</p>\n<hr>\n<p>P.S. See <a href=\"https://github.com/react-native-community/react-native-svg/issues/157\">this post</a> on why to use onPressIn() instead of OnPress() to ensure the user interactions will work correctly Apple phones with 3D touch.</p>","timeToRead":4,"tableOfContents":"","fields":{"tagSlugs":["/tags/react/","/tags/illustrator/","/tags/python/"]},"frontmatter":{"title":"Using Python to Convert Illustrator SVGs to React components","tags":["React","Illustrator","Python"],"date":"2016-09-26T00:12:03.000Z","author":{"id":"Evan Nichols","bio":"I'm a software engineer in NYC who likes React, Node, GraphQL and other cool web technologies. I also like running and dogs."}}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/projects/illustrator-to-react/"}}