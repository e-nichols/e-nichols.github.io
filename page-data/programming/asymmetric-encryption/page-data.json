{"componentChunkName":"component---src-templates-post-template-js","path":"/programming/asymmetric-encryption","result":{"data":{"markdownRemark":{"html":"<p>I’ve been doing a lot of reading into blockchain recently, and one of the foundational components of this technology is utilizing asymmetric encryption to produce a “digital signature”.  These signatures accompany a message sent across the wire, and can be used to verify the authenticity of the sender and the veracity of the message (i.e. ensuring it was not modified maliciously during transmission).</p>\n<p>Below is a short demonstration of creating and verifying a digital signature using the <code class=\"language-text\">openssl</code> CLI tool.</p>\n<ol>\n<li>Generate a private key, also called the <code class=\"language-text\">sk</code> or “secure key” for short. The key will be 2048 bits in length, as specified by the <code class=\"language-text\">rsa_keygen_bits</code> option.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ openssl genpkey -algorithm RSA -out private_key.pem -pkeyopt rsa_keygen_bits:2048</code></pre></div>\n<br/>\n<ol start=\"2\">\n<li>Generate the corresponding public key, also called the <code class=\"language-text\">pk</code> for short.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ openssl rsa -pubout -in private_key.pem -out public_key.pem</code></pre></div>\n<br/>\n<ol start=\"3\">\n<li>Create a secret message.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> “Rock Chalk Jayhawk, go KU<span class=\"token operator\">!</span>” <span class=\"token operator\">></span> secret_message.txt</code></pre></div>\n<br/>\n<ol start=\"4\">\n<li>Produce the digital signature for the secret message. This command is two separate operations: first, it produces a hash of <code class=\"language-text\">secret_message.txt</code> (commonly referred to as the message “digest”) using the SHA256 hash function. Then, it encrypts that digest using the <code class=\"language-text\">pk</code>. The process of encrypting the digest is what actually produces the digital signature.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">openssl dgst -sha256 -sign private_key.pem -out digital_signature secret_message.txt</code></pre></div>\n<br/>\n<ol start=\"5\">\n<li>(Optional) the produced <code class=\"language-text\">digital_signature</code> contains binary content by default. To get a human-readable version use the <code class=\"language-text\">enc</code> command.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ openssl enc -base64 -in digital_signature -out digital_signature.base64</code></pre></div>\n<br/>\n<p>The <code class=\"language-text\">digital_signature.base64</code> will look like:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">cat</span> digital_signature.base64\n$ tjisvQHiIte5wf5J+ZTNYaXk1a/90eQG8Haxu16qSlO/MhP6XjRE1P87XxvbtrOt\nYBkK3TwL/xsFMKNcPrR+3O0H0uO82Y0x+3RsgFKnXcm5P+BMaE0VhzRj8fKHojI6\nyBF+Uk69upXE0MRjOk00LKnzwEymGsYfdFS7HVpJyLEWAMpDLKK9YtQna1I3Mf2X\n0GJ63h/MqWG8ZVh/8d0jRyIV/mWW38AjRgueORmvI1K4bl3c2zjsLnJGWZ+2BE36\n/AKAP4eK5g3tjiBHPhYhvP2tWwoV1rpJ7Yjs4fgtERf0bfZJTCN//AjOEsDyQA6T\n<span class=\"token assign-left variable\">aTBkU05E9oj9XFhF8VtxoQ</span><span class=\"token operator\">==</span></code></pre></div>\n<br/>\n<ol start=\"6\">\n<li>(Imagination required) Send the <code class=\"language-text\">secret_message.txt</code>, corresponding <code class=\"language-text\">digital_signature</code> and a copy of our <code class=\"language-text\">public_key.pem</code> off to a friend. The friend receives the message, and would like to verify its contents and that it actually came from us. To verify, they attempt to decrypt the digital signature using our <code class=\"language-text\">pk</code>:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ openssl dgst -sha256 -verify public_key.pem -signature digital_signature secret_message.txt\n$ Verified OK</code></pre></div>\n<br/>\n<ol start=\"7\">\n<li>Now imagine that our <code class=\"language-text\">secret_message.txt</code> was actually intercepted and tampered with by an attacker. You can simulate this by making any change to <code class=\"language-text\">secret_message.txt</code>, e.g. change the message string to “Rock Chalk Jayhawk, go KSU!” Running verification on this modified message will now fail:</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> “Rock Chalk Jayhawk, go KSU<span class=\"token operator\">!</span>” <span class=\"token operator\">></span> secret_message.txt\n$ openssl dgst -sha256 -verify public_key.pem -signature digital_signature secret_memo.txt\n$ Verification failure</code></pre></div>\n<br/>\n<p>That’s it! Digital signatures provide a convenient way to validate the origin and authenticity of a message.</p>\n<p>Thanks for reading!</p>\n<p><strong>References</strong></p>\n<ul>\n<li><a href=\"https://www.youtube.com/watch?v=TmA2QWSLSPg\">https://www.youtube.com/watch?v=TmA2QWSLSPg</a></li>\n<li><a href=\"https://codingbee.net/centos/openssl-demo-encrypting-decrypting-files-using-both-symmetric-and-asymmetric-encryption\">https://codingbee.net/centos/openssl-demo-encrypting-decrypting-files-using-both-symmetric-and-asymmetric-encryption</a></li>\n<li><a href=\"https://www.openssl.org/docs/man1.0.2/man1/rsautl.html\">https://www.openssl.org/docs/man1.0.2/man1/rsautl.html</a></li>\n<li><a href=\"https://www.openssl.org/docs/man1.0.2/man1/openssl-dgst.html\">https://www.openssl.org/docs/man1.0.2/man1/openssl-dgst.html</a></li>\n</ul>","timeToRead":3,"tableOfContents":"","fields":{"tagSlugs":["/tags/encryption/"]},"frontmatter":{"title":"Digital signature mini-tutorial","tags":["encryption"],"date":"2021-04-25T00:12:03.000Z"}}},"pageContext":{"slug":"/programming/asymmetric-encryption"}}}