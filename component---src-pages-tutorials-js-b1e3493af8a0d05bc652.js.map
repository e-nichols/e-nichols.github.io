{"version":3,"sources":["webpack:///./src/pages/tutorials.js","webpack:///./src/styles/index.js","webpack:///./src/utils/typography.js","webpack:///./src/components/nav.js","webpack:///./src/components/layout.js","webpack:///./src/components/postlist.js","webpack:///./src/utils/format.js"],"names":["RenderPage","posts","data","allMarkdownRemark","edges","PageQuery","Tutorials","query","render","baseHsl","colors","black","text","light","calm","smoke","whiteSmoke","white","link","linkHover","animations","animationCurveFastOutSlowIn","animationCurveLinearOutSlowIn","animationCurveFastOutLinearIn","animationCurveDefault","animationSpeedDefault","animationSpeedFast","animationSpeedSlow","container","style","maxWidth","margin","typography","Typography","title","baseFontSize","headerColor","bodyColor","baseLineHeight","bodyWeight","boldWeight","headerFontFamily","bodyFontFamily","googleFonts","name","styles","overrideStyles","options","adjustFontSizeTo","scale","rhythm","a","color","textDecoration","marginTop","blockquote","gray","paddingLeft","marginLeft","borderLeft","borderColor","marginBottom","fontWeight","content","MOBILE_MEDIA_QUERY","marginRight","ROUTES","Nav","props","active","location","pathname","split","Object","entries","map","key","value","className","to","route","isActiveRoute","Layout","children","site","siteMetadata","css","display","textAlign","Date","getFullYear","PostList","listStyle","post","node","fields","excerpt","frontmatter","slug","formatDate","date","exports","toISOString"],"mappings":"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","file":"component---src-pages-tutorials-js-b1e3493af8a0d05bc652.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Layout from \"../components/layout\"\nimport PostList from '../components/postlist'\n\nconst Tutorials = () => (\n  <StaticQuery\n  query={PageQuery}\n  render={data => (<Layout><RenderPage data={data}/></Layout>)}\n  />\n)\n\nconst RenderPage =({data}) => {\n  const posts = data.allMarkdownRemark.edges\n  return (\n    <div>\n      <h1>try a tutorial</h1>\n      <PostList posts={posts} />\n    </div>\n  )\n}\n\nconst PageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          draft: { ne: true }\n          type: { eq: \"tutorial\" }\n        }\n      }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Tutorials\n","import { style } from \"glamor\"\n\nconst baseHsl = `291, 0%, 18%`\n\nconst colors = {\n  black: `hsla(${baseHsl},1)`,\n  text: `hsla(${baseHsl},0.95)`,\n  light: `hsla(${baseHsl},0.4)`,\n  calm: `hsla(${baseHsl},0.3)`,\n  smoke: `hsla(${baseHsl},0.2)`,\n  whiteSmoke: `hsla(${baseHsl},0.08)`,\n  white: `#fff`,\n  link: `#03a9f4`,\n  linkHover: `#ff5252`,\n}\n\n\nconst animations = {\n  animationCurveFastOutSlowIn: `cubic-bezier(0.4, 0, 0.2, 1)`,\n  animationCurveLinearOutSlowIn: `cubic-bezier(0, 0, 0.2, 1)`,\n  animationCurveFastOutLinearIn: `cubic-bezier(0.4, 0, 1, 1)`,\n  animationCurveDefault: `cubic-bezier(0.4, 0, 0.2, 1)`,\n  animationSpeedDefault: `250ms`,\n  animationSpeedFast: `200ms`,\n  animationSpeedSlow: `300ms`,\n}\n\nexport default {\n  animations: animations,\n  colors: colors,\n  container: style({\n    maxWidth: `37rem`,\n    margin: `0 auto`,\n  }),\n}\n","import Typography from 'typography'\nimport { MOBILE_MEDIA_QUERY } from \"typography-breakpoint-constants\"\nimport gray from \"gray-percentage\"\n\n// Fork of https://github.com/KyleAMathews/typography.js/tree/master/packages/typography-theme-st-annes\nconst typography = new Typography({\n  title: \"St. Evs\",\n  baseFontSize: \"16px\",\n  headerColor: \"hsla(0,0%,0%,1)\",\n  bodyColor: \"hsla(0,0%,0%,0.8)\",\n  baseLineHeight: 1.5625,\n  bodyWeight: 400,\n  boldWeight: 700,\n  headerFontFamily: ['Alegreya', \"serif\"],\n  bodyFontFamily: ['Alegreya Sans', \"sans-serif\"],\n  googleFonts: [\n    {\n      name: 'Alegreya',\n      styles: ['400','700',],\n    },\n    {\n      name: 'Alegreya Sans',\n      styles: ['400', '700',],\n    },\n  ],\n  overrideStyles: ({ adjustFontSizeTo, scale, rhythm }, options) => ({\n    a: {\n      color: \"#fb251b\",\n      textDecoration: \"none\",\n    },\n    \"a:hover,a:active\": {\n      color: options.bodyColor,\n    },\n    \"h1,h2,h3,h4,h5,h6\": {\n      marginTop: rhythm(2),\n    },\n    blockquote: {\n      ...scale(1 / 5),\n      color: gray(41),\n      paddingLeft: rhythm(18 / 16),\n      marginLeft: 0,\n      borderLeft: `${rhythm(6 / 16)} solid`,\n      borderColor: \"#fcea0e\",\n    },\n    \"blockquote > :last-child\": {\n      marginBottom: 0,\n    },\n    \"blockquote cite\": {\n      ...adjustFontSizeTo(options.baseFontSize),\n      color: options.bodyColor,\n      fontWeight: options.bodyWeight,\n    },\n    \"blockquote cite:before\": {\n      content: '\"— \"',\n    },\n    [MOBILE_MEDIA_QUERY]: {\n      blockquote: {\n        marginLeft: rhythm(-3 / 4),\n        marginRight: 0,\n        borderLeft: `${rhythm(3 / 16)} solid`,\n        borderColor: \"#fcea0e\",\n        paddingLeft: rhythm(9 / 16),\n      },\n    },\n  }),\n})\n\n// Hot reload typography in development.\nif (process.env.NODE_ENV !== `production`) {\n  typography.injectStyles()\n}\n\nexport default typography\nexport const rhythm = typography.rhythm\nexport const scale = typography.scale\n","import React from 'react'\nimport Link from \"gatsby-link\"\nimport { Location } from '@reach/router'\n\nconst ROUTES = {\n  'posts': '/',\n  'projects': '/projects',\n  'tutorials': '/tutorials',\n  'about': '/about',\n}\n\nconst isActiveRoute = (route, active) =>\n  route === active || (active === '' && route === 'posts')\n\n// TODO(etnichols): render a bullet next to active route.\nconst Nav = props => {\n  return (\n    <Location>\n    {({location}) => {\n        let active = location.pathname.split(`/`)[1]\n        return Object.entries(ROUTES).map(([key, value]) => (<>\n        <Link className=\"link-style\" to={value}>{`${isActiveRoute(key, active) ? '>' : ''} ${key}`}</Link>\n        <br/>\n        </>))\n      }}\n    </Location>\n  )\n}\n\nexport default Nav\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Link from 'gatsby-link'\n\nimport Nav from '../components/nav'\n\nimport './layout.scss'\nimport styles from '../styles'\nimport { rhythm } from '../utils/typography'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => {\n      const { title } = data.site.siteMetadata\n      return (\n        <>\n          <div className=\"container\">\n            <main>\n              <Link to=\"/\" css={{ display: `inline-block` }}>\n                <h1 className=\"site-title\">{title}</h1>\n              </Link>\n              <hr />\n              <Nav />\n              {children}\n            </main>\n            <footer>\n              <div style={{ color: styles.colors.text, textAlign: `center` }}>\n                {`© ${new Date().getFullYear()} ${title}`}\n              </div>\n            </footer>\n          </div>\n        </>\n      )\n    }}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { formatDate } from '../utils/format'\nimport styles from '../styles'\n\nconst PostList = ({ posts }) => (\n  <ul style={{ marginLeft: 0, listStyle: `none`,}}>\n    {posts.map(post => {\n      const { node } = post\n      const { excerpt, fields, frontmatter } = node\n      return (\n        <li key={fields.slug}>\n          <span\n            style={{color: styles.colors.text}}\n            className=\"post-date\">\n            {formatDate(frontmatter.date)}\n          </span>\n          <Link to={fields.slug}>\n            {frontmatter.title}\n          </Link>\n        </li>\n      )\n    })}\n  </ul>\n)\n\nexport default PostList\n","/** Formats string in form YYYY-MM-DD. */\nconst formatDate = date => new Date(date).toISOString().split('T')[0]\n\nexports.formatDate = formatDate\n"],"sourceRoot":""}