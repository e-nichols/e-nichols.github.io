webpackJsonp([0xca12b8cd755c],{460:function(n,a){n.exports={data:{markdownRemark:{html:'<p>This is a short post reviewing <a href="https://www.interviewcake.com">Interview Cake’s</a> programming question: “Given an integer array, find the highest product of three integers.”</p>\n<p>I naively jumped right in and coded a solution that, as I quickly realized, works only for positives. Blerg. It’s not good practice to leave out half the number spectrum so I went back to the drawing board, considering all possible cases we could have with an input array.</p>\n<ol>\n<li>Three elements only. Just return their product.</li>\n<li>Three or more elements, all positives: Use a version of my naive initial algorithm.</li>\n<li>Three or more elements, all negatives: Same as above, but we will want to use the smallest negative values.</li>\n<li>\n<p>Three or more elements, mix of postive and negatives:</p>\n<ol>\n<li>One negative. Return product of the three maximum positive numbers; there is no benefit given a single negative.</li>\n<li>Two or more negatives. Consider the array [-10,-10,4,3,2]. The max product should be 400. In this case, I decided it would be to return the max of: max positive and two greatest negatives, or 3 max positives.</li>\n</ol>\n</li>\n</ol>\n<p>That covers it. We don’t care if there are more than 3 negatives, we’re still only ever going to use the two largest.</p>\n<p>My second solution goes something like this, using O(n) time and space.</p>\n<ul>\n<li>Iterate over arr, sorting values into a negative and positive arr.</li>\n<li>Sort the negative and positive arrays.</li>\n<li>Code the conditions 1-3 above.</li>\n</ul>\n<p>However, it seems the Greedy approach still prevails overall, providing a solution in O(n) time and O(1) space.</p>\n<p>I was on the right track though, in the sense of keeping track of the two highest and two lowest values. A combination of these will yield the biggest answer. They went with the keep track of the highest product of two and lowest product of two. I coded up their answer as well just for understanding:</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">optimalHighestProduct</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token comment" spellcheck="true">//we need to keep track of the highest, lowest, maxProductOfThree, maxProd2, minProd2.</span>\n\n    <span class="token comment" spellcheck="true">//initialize the variables.</span>\n    <span class="token keyword">var</span> current<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">var</span> maxProd3 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> maxProd2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">var</span> minProd2 <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        current <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token comment" spellcheck="true">//do we have new max prod?</span>\n        maxProd3 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxProd3<span class="token punctuation">,</span>maxProd2<span class="token operator">*</span>current<span class="token punctuation">,</span>minProd2<span class="token operator">*</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">//do we have a new max prod 2, or min prod 2?</span>\n        maxProd2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxProd2<span class="token punctuation">,</span> max<span class="token operator">*</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        minProd2 <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>minProd2<span class="token punctuation">,</span> min<span class="token operator">*</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment" spellcheck="true">//do we have a new max or min?</span>\n        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>min<span class="token punctuation">,</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> maxProd3<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>The greedy approach is simple and powerful. Don’t waste time and space if you need to! Here are some keywords to look for, where a greedy algorithm may work well: find the greatest, find the highest return, what is the optimal solution… stuff like that.</p>\n<p>And questions to ask: what values do I need to keep track of as I iterate over the data in order to return the optimal solution? In which order do I need to perform these updates to keep things in order?</p>\n<p>The Greedy approach almost always provides the best time and space complexity.</p>\n<p>On an unrelated note: I learned the difference between slice and splice in Javascript.</p>\n<div class="gatsby-highlight">\n      <pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">\'E\'</span><span class="token punctuation">,</span><span class="token string">\'V\'</span><span class="token punctuation">,</span><span class="token string">\'A\'</span><span class="token punctuation">,</span><span class="token string">\'N\'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> bar <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> foo <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will output [\'E\',\'V\',\'A\',\'N\']</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> bar <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will output [\'E\',\'V\']</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will output [1,2,5];</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// will output [3,4]</span>\n</code></pre>\n      </div>\n<p><code>Slice</code> “cuts out” a certain number of values from the array and returns them, leaving the original array unchanged. <code>Splice</code> “cuts out” a certain number of values from the array and returns them, <em>mutating the original array in the process</em>. That’s the little gotcha between the two. Slice doesn’t mess with the original but splice does.</p>',timeToRead:3,tableOfContents:"",fields:{tagSlugs:["/tags/algorithms/","/tags/javascript/"]},frontmatter:{title:"Greedy Algorithm Practice in Javascript",tags:["algorithms","javascript"],date:"August 03, 2016",author:{id:"Evan Nichols",bio:"Software Engineer and outdoor enthusiast. EngRes @ Google NYC.",avatar:{children:[{responsiveResolution:{src:"/static/4c8a15d8009c77284919b7aa2785b3cc-88e85.jpg",srcSet:"/static/4c8a15d8009c77284919b7aa2785b3cc-88e85.jpg 1x,\n/static/4c8a15d8009c77284919b7aa2785b3cc-db17a.jpg 1.5x,\n/static/4c8a15d8009c77284919b7aa2785b3cc-599b9.jpg 2x,\n/static/4c8a15d8009c77284919b7aa2785b3cc-3e248.jpg 3x"}}]}}}}},pathContext:{slug:"/greedy-algorithm-practice/"}}}});
//# sourceMappingURL=path---greedy-algorithm-practice-609b9bb247731118fe61.js.map