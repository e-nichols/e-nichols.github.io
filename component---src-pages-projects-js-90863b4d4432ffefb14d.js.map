{"version":3,"sources":["webpack:///./src/pages/projects.js","webpack:///./src/components/postlist.js","webpack:///./src/components/layout.js","webpack:///./src/utils/format.js"],"names":["RenderPage","posts","data","allMarkdownRemark","edges","PageQuery","Projects","query","render","PostList","style","marginLeft","listStyle","map","post","node","fields","excerpt","frontmatter","key","slug","color","styles","colors","text","className","formatDate","date","to","title","Layout","children","site","siteMetadata","css","display","fontSize","textAlign","Date","getFullYear","exports","toISOString","split"],"mappings":"6KAaMA,EAAY,SAAC,GAAY,IACvBC,EADsB,EAAVC,KACCC,kBAAkBC,MACrC,OACE,6BACE,gDACA,kBAAC,IAAD,CAAUH,MAAOA,MAKjBI,EAAS,aA4BAC,UA7CE,kBACf,kBAAC,cAAD,CACAC,MAAOF,EACPG,OAAQ,SAAAN,GAAI,OAAK,kBAAC,IAAD,KAAQ,kBAACF,EAAD,CAAYE,KAAMA,MAF3C,W,oCCPF,uEA0BeO,IAnBE,SAAC,GAAD,IAAGR,EAAH,EAAGA,MAAH,OACf,wBAAIS,MAAO,CAAEC,WAAY,EAAGC,UAAU,SACnCX,EAAMY,KAAI,SAAAC,GAAS,IACVC,EAASD,EAATC,KACSC,GAAwBD,EAAjCE,QAAiCF,EAAxBC,QAAQE,EAAgBH,EAAhBG,YACzB,OACE,wBAAIC,IAAKH,EAAOI,MACd,0BAAMV,MAAO,CAAEW,MAAOC,IAAOC,OAAOC,MAAQC,UAAU,aACnDC,qBAAWR,EAAYS,OAE1B,kBAAC,OAAD,CAAMF,UAAU,YAAYG,GAAIZ,EAAOI,MACpCF,EAAYW,c,sJCuCVC,IA9CA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,cAAD,CACExB,MAAK,YASLC,OAAQ,SAAAN,GAAS,IACP2B,EAAU3B,EAAK8B,KAAKC,aAApBJ,MACR,OACE,oCACE,yBAAKJ,UAAU,aACb,8BACE,kBAAC,IAAD,CAAMG,GAAG,IAAIM,IAAK,CAAEC,QAAQ,iBAC1B,wBAAIV,UAAU,cAAcI,IAE9B,6BACA,kBAAC,IAAD,MACCE,GAEH,gCACE,yBACErB,MAAO,CACL0B,SAAU,OACVf,MAAOC,IAAOC,OAAOC,KACrBa,UAAU,WAJd,MAOQ,IAAIC,MAAOC,cAPnB,IAOoCV,OA/BhD,W,0jDCTFW,EAAQd,WAFW,SAAAC,GAAI,OAAI,IAAIW,KAAKX,GAAMc,cAAcC,MAAM,KAAK,K","file":"component---src-pages-projects-js-90863b4d4432ffefb14d.js","sourcesContent":["import React from \"react\"\nimport { StaticQuery, graphql } from 'gatsby'\n\nimport Layout from \"../components/layout\"\nimport PostList from '../components/postlist'\n\nconst Projects = () => (\n  <StaticQuery\n  query={PageQuery}\n  render={data => (<Layout><RenderPage data={data}/></Layout>)}\n  />\n)\n\nconst RenderPage =({data}) => {\n  const posts = data.allMarkdownRemark.edges\n  return (\n    <div>\n      <h2>peruse a project</h2>\n      <PostList posts={posts} />\n    </div>\n  )\n}\n\nconst PageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: {\n        frontmatter: {\n          draft: { ne: true }\n          type: { eq: \"project\" }\n        }\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            date\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Projects\n","import React from 'react'\nimport { Link } from 'gatsby'\n\nimport { formatDate } from '../utils/format'\nimport styles from '../styles'\nimport './postlist.css'\n\nconst PostList = ({ posts }) => (\n  <ul style={{ marginLeft: 0, listStyle: `none` }}>\n    {posts.map(post => {\n      const { node } = post\n      const { excerpt, fields, frontmatter } = node\n      return (\n        <li key={fields.slug}>\n          <span style={{ color: styles.colors.text }} className=\"post-date\">\n            {formatDate(frontmatter.date)}\n          </span>\n          <Link className=\"list-item\" to={fields.slug}>\n            {frontmatter.title}\n          </Link>\n        </li>\n      )\n    })}\n  </ul>\n)\n\nexport default PostList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Link from 'gatsby-link'\n\nimport Nav from '../components/nav'\n\nimport './layout.scss'\nimport styles from '../styles'\nimport { rhythm } from '../utils/typography'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => {\n      const { title } = data.site.siteMetadata\n      return (\n        <>\n          <div className=\"container\">\n            <main>\n              <Link to=\"/\" css={{ display: `inline-block` }}>\n                <h1 className=\"site-title\">{title}</h1>\n              </Link>\n              <hr />\n              <Nav />\n              {children}\n            </main>\n            <footer>\n              <div\n                style={{\n                  fontSize: '18px',\n                  color: styles.colors.text,\n                  textAlign: `center`,\n                }}\n              >\n                {`Â© ${new Date().getFullYear()} ${title}`}\n              </div>\n            </footer>\n          </div>\n        </>\n      )\n    }}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","/** Formats string in form YYYY-MM-DD. */\nconst formatDate = date => new Date(date).toISOString().split('T')[0]\n\nexports.formatDate = formatDate\n"],"sourceRoot":""}