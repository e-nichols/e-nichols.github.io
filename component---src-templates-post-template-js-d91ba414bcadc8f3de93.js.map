{"version":3,"sources":["webpack:///./src/components/Layout.js","webpack:///./src/templates/postTemplate.js"],"names":["Layout","children","query","render","data","title","site","siteMetadata","className","to","css","display","style","fontSize","color","styles","colors","text","textAlign","Date","getFullYear","PostTemplate","markdownRemark","frontmatter","html","tableOfContents","timeToRead","marginBottom","rhythm","shadow","marginTop","paddingTop","light","TagsSection","post","dangerouslySetInnerHTML","__html","tags","fields","tagSlugs","tagsArray","map","tag","i","divider","length","key","fontStyle","pageQuery"],"mappings":"kNAyDeA,IA9CA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,cAAD,CACEC,MAAK,YASLC,OAAQ,SAAAC,GAAS,IACPC,EAAUD,EAAKE,KAAKC,aAApBF,MACR,OACE,oCACE,yBAAKG,UAAU,aACb,8BACE,kBAAC,IAAD,CAAMC,GAAG,IAAIC,IAAK,CAAEC,QAAQ,iBAC1B,wBAAIH,UAAU,cAAcH,IAE9B,6BACA,kBAAC,IAAD,MACCJ,GAEH,gCACE,yBACEW,MAAO,CACLC,SAAU,OACVC,MAAOC,IAAOC,OAAOC,KACrBC,UAAU,WAJd,MAOQ,IAAIC,MAAOC,cAPnB,IAOoCf,OA/BhD,W,kCCXF,2KAQe,SAASgB,EAAT,GAAiC,IACtCC,EADqC,EAARlB,KAC7BkB,eACAC,EAAmDD,EAAnDC,YAAaC,EAAsCF,EAAtCE,KAAMC,EAAgCH,EAAhCG,gBAAiBC,EAAeJ,EAAfI,WAC1C,OACE,kBAAC,IAAD,KACE,gCACE,wBAAId,MAAO,CACTe,aAAcC,YAAO,IACrBd,MAAOS,EAAYM,SAElBN,EAAYlB,OAEf,wBAAIO,MAAO,CAACe,aAAcC,YAAO,OACjC,uBACEhB,MAAO,CACLkB,UAAW,EACXC,WAAY,EACZpB,QAAQ,QACRG,MAAM,GAAIC,IAAOC,OAAOgB,QAGtBN,EARN,eASE,kBAACO,EAAD,CAAaC,KAAMZ,MAGvB,yBACEa,wBAAyB,CAAEC,OAAQX,GACnCjB,UAAU,QAEZ,yBAAK2B,wBAAyB,CAAEC,OAAQZ,GAAQhB,UAAU,UAKlE,IAAMyB,EAAc,SAAC,GAAY,IAC3BI,EADgBH,EAAU,EAAVA,KAEpB,GAAIA,EAAKI,OAAOC,SAAU,CACxB,IAAMC,EAAYN,EAAKI,OAAOC,SAC9BF,EAAOG,EAAUC,KAAI,SAACC,EAAKC,GACzB,IAAMC,EAAUD,EAAIH,EAAUK,OAAS,GAAK,oCAC5C,OACE,0BAAMC,IAAKJ,GACT,kBAAC,IAAD,CAAMjC,GAAIiC,GAAMR,EAAKX,YAAYc,KAAKM,IACrCC,MAMT,OACE,0BAAMhC,MAAO,CAAEmC,UAAU,SAAW7B,UAAU,SAA9C,UACUmB,IAKDW,EAAS","file":"component---src-templates-post-template-js-d91ba414bcadc8f3de93.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Link from 'gatsby-link'\n\nimport Nav from '../components/nav'\n\nimport './layout.scss'\nimport styles from '../styles'\nimport { rhythm } from '../utils/typography'\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => {\n      const { title } = data.site.siteMetadata\n      return (\n        <>\n          <div className=\"container\">\n            <main>\n              <Link to=\"/\" css={{ display: `inline-block` }}>\n                <h1 className=\"site-title\">{title}</h1>\n              </Link>\n              <hr />\n              <Nav />\n              {children}\n            </main>\n            <footer>\n              <div\n                style={{\n                  fontSize: '18px',\n                  color: styles.colors.text,\n                  textAlign: `center`,\n                }}\n              >\n                {`© ${new Date().getFullYear()} ${title}`}\n              </div>\n            </footer>\n          </div>\n        </>\n      )\n    }}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n","\nimport React from 'react'\nimport Link from 'gatsby-link'\nimport { graphql } from 'gatsby'\n\nimport Layout from '../components/Layout'\nimport styles from '../styles'\nimport { rhythm } from '../utils/typography'\n\nexport default function PostTemplate({ data }) {\n  const { markdownRemark } = data // data.markdownRemark holds our post data\n  const { frontmatter, html, tableOfContents, timeToRead } = markdownRemark\n    return (\n      <Layout>\n        <header>\n          <h1 style={{\n            marginBottom: rhythm(1/2),\n            color: frontmatter.shadow}}\n          >\n            {frontmatter.title}\n          </h1>\n          <hr style={{marginBottom: rhythm(1/2)}}/>\n          <p\n            style={{\n              marginTop: 0,\n              paddingTop: 0,\n              display: `block`,\n              color: `${styles.colors.light}`,\n            }}\n          >\n            {`${timeToRead} min read • `}\n            <TagsSection post={markdownRemark} />\n          </p>\n        </header>\n        <div\n          dangerouslySetInnerHTML={{ __html: tableOfContents }}\n          className=\"toc\"\n        />\n        <div dangerouslySetInnerHTML={{ __html: html }} className=\"post\" />\n      </Layout>\n    )\n}\n\nconst TagsSection = ({post}) => {\n  let tags\n  if (post.fields.tagSlugs) {\n    const tagsArray = post.fields.tagSlugs\n    tags = tagsArray.map((tag, i) => {\n      const divider = i < tagsArray.length - 1 && <span>{`, `}</span>\n      return (\n        <span key={tag}>\n          <Link to={tag}>{post.frontmatter.tags[i]}</Link>\n          {divider}\n        </span>\n      )\n    })\n  }\n\n  return (\n    <span style={{ fontStyle: `normal`, textAlign: `left`,}}>\n      tagged {tags}\n    </span>\n  )\n}\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      timeToRead\n      tableOfContents\n      fields {\n        tagSlugs\n      }\n      frontmatter {\n        title\n        tags\n        date\n      }\n    }\n  }\n`\n"],"sourceRoot":""}