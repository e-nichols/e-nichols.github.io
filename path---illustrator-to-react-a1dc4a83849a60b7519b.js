webpackJsonp([0xf260be10d934],{472:function(n,s){n.exports={data:{markdownRemark:{html:'<p>I’ve been working on a project the past few months for a team of doctors at the KU Medical Center – Dr. Garth Fraga, Dr. Arlette-Habashi and Matt DaCunha, a third-year medical student. We’re making RightSite, an iOS application aimed at reducing biopsy-labeling errors in the clinical setting.</p>\n<p>The app is comprised of about 30 different images of the human body, which users can click on to see the anatomically correct labeling.</p>\n<p><img src="/c0e71b660fae0b5f971df31593dab8e3.gif"></p>\n<p>I use Adobe Illustrator to make the interactive overlays for the illustrations. I export the overlay as an SVG, which I then use to create a <a href="https://github.com/react-native-community/react-native-svg">React Native SVG</a> component. Unfortunately, the conversion from SVG to React Component is quite tedious. Removing useless defs and styles, uppercasing all the different shapes, removing the underscores between the path IDs – all the stuff that makes your wrist ache and eyes glaze over. So I invested an afternoon to automate the conversion. The result: 50 lines of Python I wish I had wrote at the beginning of this project.</p>\n<div class="gatsby-highlight">\n      <pre class="language-python"><code><span class="token keyword">import</span> sys\n<span class="token keyword">import</span> re\n\n<span class="token keyword">def</span> <span class="token function">caps</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"_1_\\""</span><span class="token punctuation">,</span><span class="token string">"\\")}"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"_2_\\""</span><span class="token punctuation">,</span><span class="token string">"\\")}"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"_3_\\""</span><span class="token punctuation">,</span><span class="token string">"\\")}"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"fill-rule=\\"evenodd\\" clip-rule=\\"evenodd\\""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>\n    <span class="token comment" spellcheck="true">#XX used as marker for addProps function</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"fill=\\"#2895B2\\""</span><span class="token punctuation">,</span> <span class="token string">"XX"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span><span class="token string">"Path"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"ellipse"</span><span class="token punctuation">,</span><span class="token string">"Ellipse"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"rect"</span><span class="token punctuation">,</span> <span class="token string">"Rect"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"polyline"</span><span class="token punctuation">,</span><span class="token string">"Polyline"</span><span class="token punctuation">)</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"circle"</span><span class="token punctuation">,</span><span class="token string">"Circle"</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> str\n\n<span class="token keyword">def</span> <span class="token function">createTag</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    matches<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">\'\\"(.+?)\\"\'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span>\n    w <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>\n    h <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span>\n    vb <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>\n    <span class="token keyword">return</span><span class="token punctuation">(</span> <span class="token string">"&lt;Svg width=\\""</span> <span class="token operator">+</span> w <span class="token operator">+</span> <span class="token string">"\\" "</span><span class="token operator">+</span><span class="token string">"height=\\""</span> <span class="token operator">+</span> h <span class="token operator">+</span> <span class="token string">"\\" "</span> <span class="token operator">+</span> <span class="token string">"viewBox=\\""</span> <span class="token operator">+</span> vb <span class="token operator">+</span> <span class="token string">"\\">\\n"</span> <span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">addProps</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    matches<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">\'\\"(.+?)\\"\'</span><span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    id <span class="token operator">=</span> matches<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"id="</span><span class="token punctuation">,</span><span class="token string">"onPressIn={() => this._appendEvent("</span><span class="token punctuation">)</span>\n    injection <span class="token operator">=</span> <span class="token string">"fill={consts.defaultFill} fillOpacity={this.state.selected == \\""</span><span class="token operator">+</span> id <span class="token operator">+</span> <span class="token string">"\\" ? consts.selected : consts.visible}"</span>\n    str <span class="token operator">=</span> str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"XX"</span><span class="token punctuation">,</span>injection<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> str\n\n<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    output <span class="token operator">=</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"w+"</span><span class="token punctuation">)</span>\n    <span class="token keyword">with</span> open<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> input<span class="token punctuation">:</span>\n        f <span class="token operator">=</span> input<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n        <span class="token comment" spellcheck="true">#opening tag</span>\n        output<span class="token punctuation">.</span>write<span class="token punctuation">(</span> createTag<span class="token punctuation">(</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>\n        lineno <span class="token operator">=</span> <span class="token number">0</span>\n        <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>\n            <span class="token keyword">if</span> lineno <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>\n                line <span class="token operator">=</span> caps<span class="token punctuation">(</span>line<span class="token punctuation">)</span>\n                <span class="token keyword">if</span> line<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">\'&lt;\'</span><span class="token punctuation">:</span>\n                    line <span class="token operator">=</span> addProps<span class="token punctuation">(</span>line<span class="token punctuation">)</span>\n                    output<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>\n                <span class="token keyword">else</span><span class="token punctuation">:</span>\n                    output<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line<span class="token punctuation">)</span>\n            lineno <span class="token operator">+=</span> <span class="token number">1</span>\n        <span class="token comment" spellcheck="true">#closing tag</span>\n        output<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"&lt;/Svg>"</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>\n    main<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Looking at the program function by function:</p>\n<ul>\n<li><strong>caps(str)</strong>: remove Adobe Illustrator layer name suffixes and underscores (e.g. “Some<em>Layer</em>1_” become s”Some Layer”). Uppercase all SVG elements.</li>\n<li>\n<p><strong>createTag(str)</strong>: create the opening opening tag for the <a href="https://github.com/react-native-community/react-native-svg">react-native-svg</a> component. The raw SVG export from Adobe contains a line like this:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>"x="0px" y="0px" width="180px" height="626px" viewBox="-0.5 -0.3 180 626"</code></pre>\n      </div>\n<p>We care about the quoted values, which are used within the tag. <a href="https://docs.python.org/2/library/re.html">Python’s regular expressions</a> are very handy for this.</p>\n</li>\n<li>\n<p><strong>addProps(str)</strong>: Create the onPress function and “inject” style values into the individual SVG elements. This allows user to interact with the individual components of the SVGs. Another example line:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code><path id="Fifth_right_distal_plantar_toe_1_" fill-rule="evenodd" clip-rule="evenodd" fill="#2895B2" d="..."/></code></pre>\n      </div>\n<p>First, we convert the id variable into the OnPressIn function using a simple replace call. Next, create the “injection” string containing the style values, and insert this into the tag using the “XX” string that was inserted in the caps() function earlier.</p>\n</li>\n<li>\n<p><strong>main()</strong>: open the input SVG and write to the output SVG using the functions above. To run this script from the CLI:</p>\n<div class="gatsby-highlight">\n      <pre class="language-none"><code>python clean.py <INPUT_SVG> <OUTPUT_SVG></code></pre>\n      </div>\n<p>The &#x3C;INPUT<em>SVG> will be parsed, and the finished file will be written to &#x3C;OUTPUT</em>SVG> in the same directory. If it does not already exist, the &#x3C;OUTPUT_SVG> file will be created automatically (no need to make an empty SVG file to pass in).</p>\n</li>\n</ul>\n<p>Main tosses out the top 8 lines of the input SVG. It is useless within the react-native-svg component. After creating the opening tag, the remainder of the file is processed. The addProps() function is called if an ”&#x3C;” opening tag is encountered; all other lines are written to the output without change.</p>\n<p>Performing the SVG conversions by hand isn’t a <em>broken</em> process, but it is woefully <em>inefficient</em>. And inefficient processes are bad. But I always grapple.</p>\n<p><em>“Is it worth it to take a day and address this inefficiency? I have a lot of other shit to do.”</em></p>\n<p>Let this script serve to show: it most definitely IS worth it. Eliminate repetitive tasks by keeping a keen eye for automation opportunities in your workflows.</p>\n<hr>\n<p>P.S. See <a href="https://github.com/react-native-community/react-native-svg/issues/157">this post</a> on why to use onPressIn() instead of OnPress() to ensure the user interactions will work correctly Apple phones with 3D touch.</p>',timeToRead:4,tableOfContents:"",fields:{tagSlugs:["/tags/react/","/tags/illustrator/","/tags/python/"]},frontmatter:{title:"Using Python to Convert Illustrator SVGs to React components",tags:["React","Illustrator","Python"],date:"September 26, 2016",author:{id:"Evan Nichols",bio:"Software Engineer and outdoor enthusiast. EngRes @ Google NYC.",avatar:{children:[{responsiveResolution:{src:"/static/4c8a15d8009c77284919b7aa2785b3cc-88e85.jpg",srcSet:"/static/4c8a15d8009c77284919b7aa2785b3cc-88e85.jpg 1x,\n/static/4c8a15d8009c77284919b7aa2785b3cc-db17a.jpg 1.5x,\n/static/4c8a15d8009c77284919b7aa2785b3cc-599b9.jpg 2x,\n/static/4c8a15d8009c77284919b7aa2785b3cc-3e248.jpg 3x"}}]}}}}},pathContext:{slug:"/illustrator-to-react/"}}}});
//# sourceMappingURL=path---illustrator-to-react-a1dc4a83849a60b7519b.js.map